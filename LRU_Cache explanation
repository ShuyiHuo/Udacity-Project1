According to the assignment, “Least Recently Used (LRU) cache. An LRU cache is a type of cache in which we remove the least recently used entry when the cache memory reaches its limit.”  I use LinkList to store and track the cache history.  Firstly, I modify the Node class and add the removeLinks function to remove the Node in LinkList. Then,  I modify the set function in LRU cache class. I use hashmanp to store the key and value and append into LinkList. If then length of LinkList is bigger than capacity, then remove the tail of Linklist which is the least recently used entry. Finally, I modify the get function,  if the key in the hash map, then return the value and prepend this key and value to the head which is recently used entry. 

It will spent O(n) times since it need to traverses  dictionary collection and space complexity is O(n) size of cache. 